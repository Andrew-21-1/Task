const dropTables = `
DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
`

const createTables = `
CREATE TABLE IF NOT EXISTS
Users(
  id INT GENERATED BY DEFAULT AS IDENTITY,
  username VARCHAR(20) UNIQUE NOT NULL,
  email VARCHAR(50) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  suspended boolean DEFAULT false,
  frozen boolean DEFAULT false,
  PRIMARY KEY(id)
);

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_on = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;
    
CREATE TABLE Tasks (
  id INT GENERATED BY DEFAULT AS IDENTITY,
  assigner_id INT NOT NULL,
  assignee_id INT ,
  topic TEXT,
  assigned boolean DEFAULT false,
  created_on TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_on TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  deadline TIMESTAMP NOT NULL,
  frozen boolean DEFAULT false,
  confirmed boolean DEFAULT false,
  submission text DEFAULT NULL,
  PRIMARY KEY (id),
  CONSTRAINT fk_assigner FOREIGN KEY (assigner_id) REFERENCES users (id),
  CONSTRAINT fk_assignee FOREIGN KEY (assignee_id) REFERENCES users (id)
   );
 
 CREATE TRIGGER set_timestamp
BEFORE UPDATE ON Tasks
FOR EACH ROW
EXECUTE PROCEDURE trigger_set_timestamp();
 
CREATE TABLE Meetings (
  id INT GENERATED BY DEFAULT AS IDENTITY,
  organizer_id INT NOT NULL,
  starts TIMESTAMP NOT NULL,
  ends TIMESTAMP NOT NULL,
  frozen boolean DEFAULT false,
  PRIMARY KEY (id),
  CONSTRAINT fk_organizer FOREIGN KEY (organizer_id) REFERENCES users (id)
 );
 CREATE TABLE TaskApplies (
  task_id INT ,
  applicants_id INT,
  frozen boolean DEFAULT false,
  CONSTRAINT fk_tasks FOREIGN KEY (task_id) REFERENCES tasks (id),
  CONSTRAINT fk_applicants FOREIGN KEY (applicants_id) REFERENCES users (id),
  PRIMARY KEY (task_id,applicants_id)
  );
  CREATE TABLE MeetingsAccepts (
    task_id INT ,
    meeting_id INT,
    invited_id INT,
    confirmed boolean DEFAULT false,
    frozen boolean DEFAULT false,
    CONSTRAINT fk_tasks FOREIGN KEY (task_id) REFERENCES tasks (id),
    CONSTRAINT fk_invited FOREIGN KEY (invited_id) REFERENCES users (id),
    CONSTRAINT fk_meetings FOREIGN KEY (meeting_id) REFERENCES meetings (id),
    PRIMARY KEY (task_id,invited_id,meeting_id)
    );
    `
module.exports = { createTables, dropTables }
